#######################################################################################
#   Complete pipeline for creating the MetaSRA database from the latest version of 
#   the SRAdb. Uses Condor to distribute the work across machines.
#######################################################################################

# Rules that should not run on cluster backends
localrules: all, compute_chunks, gather_mappings

####### Pipeline parameters. Set these variables appropriately.

# This variable is used as the ID of the pipeline run. I usually use the data, but it
# can be any string.
TODAY_DATE = '2025-01-11'

# Where to save presistent output
PRESISTENT_DIR = f'/ua/ml-group/metadata-standardization-automation/metaSRA-build/{TODAY_DATE}'

# The absolute path of the repo, accessible to condor (i.e. on a shared drive)
METASRA_REPO = '/ua/ml-group/metadata-standardization-automation/MetaSRA-pipeline'

# Location to place the SRA metadata files 
SRA_DB_DESTINATION = f'{PRESISTENT_DIR}/sra_db'

# Location to place the input files for Condor that are shared across jobs
CONDOR_INPUT_LOC = f'{PRESISTENT_DIR}/create_metasra_condor_input'

# Location of the script to create the raw metadata JSON file that is fed to each Condor job
EXTRACT_METADATA_JSON_LOCATION = f'{METASRA_REPO}/create_metasra'

# Location of map_sra_to_ontology
PIPELINE_SRC_LOC = f'{METASRA_REPO}'

# Location of pipeline_v53.py
BUILD_PIPELINE_LOC = f'{METASRA_REPO}/all_pipelines'

# Location of all the scripts for running the MetaSRA pipeline (not the MetaSRA code itself)
CREATE_METASRA_SRC = f'{METASRA_REPO}/create_metasra'

# Location of the Condor root directory
CONDOR_ROOT_LOC = f'{METASRA_REPO}/create_metasra'

# Location of the output files
OUTPUT_LOC = f'{PRESISTENT_DIR}/create_metasra_output'


####### These variables can be left alone.

# Location of SRAdb
SRA_DB_LOCATION = 'https://gbnci.cancer.gov/sra/SRAmetadb.sqlite.gz'

# Name of the file output by each Condor job
PER_JOB_OUTPUT_FILENAME = 'metasra_mappings.json'

# Name of the Condor submit file
SUBMIT_FILENAME = 'create_metasra.submit'

# Name of the file that Condor has terminated
FINISH_FILENAME = 'finished.txt'

# The name of the file storing the raw output from all Condor jobs
RAW_MAPPINGS_FILENAME = 'metasra_raw_mappings.{}.json'.format(TODAY_DATE)

# The name of the file storing the predicted sample types
SAMPLE_TYPE_PREDICTIONS_FILENAME = 'sample_type_predictions.{}.json'.format(TODAY_DATE)

# One rule to rule them all, one rule to bind them...
rule all:
    input:
        '{output_loc}/metasra.RNA_Seq.human.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        '{output_loc}/metasra.RNA_Seq.human.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        '{output_loc}/metasra.ChIP_Seq.human.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        '{output_loc}/metasra.ChIP_Seq.human.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        '{output_loc}/metasra.RNA_Seq.mouse.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        '{output_loc}/metasra.RNA_Seq.mouse.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        '{output_loc}/metasra.ChIP_Seq.mouse.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        '{output_loc}/metasra.ChIP_Seq.mouse.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        )

##################################################################################
# Download the SRAdb. This is the database storing the raw
# metadata for the entire SRA. See the following:
# https://bioconductor.org/packages/release/bioc/html/SRAdb.html
##################################################################################
rule download_SRAdb:
    output:
        '{sra_db_dest}/SRAmetadb.{date}.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        )
    run:
        commands=[
            "curl {sra_db_loc} > {{output}}.gz".format(
                sra_db_loc=SRA_DB_LOCATION
            ),
            "gunzip -f {output}.gz"
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

##################################################################################
# We only want a subset of the metadata, so I create a new SQLite
# file storing only the data we want to standardize. Furthermore, 
# this parses the key-value pairs in the SRAdb and stores them into
# their own table in this 'subset' database.
##################################################################################
rule build_custom_SRAdb:
    input:
        '{sra_db_dest}/SRAmetadb.{date}.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        )
    output:
        rna_human='{sra_db_dest}/SRAmetadb.subdb.{date}.RNA_Seq.human.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        ),
        chip_human='{sra_db_dest}/SRAmetadb.subdb.{date}.CHiP_Seq.human.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        ),
        rna_mouse='{sra_db_dest}/SRAmetadb.subdb.{date}.RNA_Seq.mouse.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        ),
        chip_mouse='{sra_db_dest}/SRAmetadb.subdb.{date}.CHiP_Seq.mouse.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        )
    run:
        commands=[
            "python2.7 {}/build_subdb.py RNA-Seq 'Homo sapiens' -t {{input}} -s {{output.rna_human}}".format(
                CREATE_METASRA_SRC
            ),
            "python2.7 {}/build_subdb.py ChIP-Seq 'Homo sapiens' -t {{input}} -s {{output.chip_human}}".format(
                CREATE_METASRA_SRC
            ),
            "python2.7 {}/build_subdb.py RNA-Seq 'Mus musculus' -t {{input}} -s {{output.rna_mouse}}".format(
                CREATE_METASRA_SRC
            ),
            "python2.7 {}/build_subdb.py ChIP-Seq 'Mus musculus' -t {{input}} -s {{output.chip_mouse}}".format(
                CREATE_METASRA_SRC
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)   

##################################################################################
# We extract the key-value pairs in the 'subset' database into a
# JSON file, which is provided as input to all of the downstream
# Condor jobs. 
##################################################################################
rule extract_json_from_sqlite:
    input:
        rna_human='{sra_db_dest}/SRAmetadb.subdb.{date}.RNA_Seq.human.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        ),
        chip_human='{sra_db_dest}/SRAmetadb.subdb.{date}.CHiP_Seq.human.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        ),
        rna_mouse='{sra_db_dest}/SRAmetadb.subdb.{date}.RNA_Seq.mouse.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        ),
        chip_mouse='{sra_db_dest}/SRAmetadb.subdb.{date}.CHiP_Seq.mouse.sqlite'.format(
            sra_db_dest=SRA_DB_DESTINATION,
            date=TODAY_DATE
        )
    output:
        rna_human='{}/sample_to_raw_metadata.RNA_Seq.human.json'.format(
            CONDOR_INPUT_LOC
        ),
        chip_human='{}/sample_to_raw_metadata.ChIP_Seq.human.json'.format(
            CONDOR_INPUT_LOC
        ),
        rna_mouse='{}/sample_to_raw_metadata.RNA_Seq.mouse.json'.format(
            CONDOR_INPUT_LOC
        ),
        chip_mouse='{}/sample_to_raw_metadata.ChIP_Seq.mouse.json'.format(
            CONDOR_INPUT_LOC
        )
    run:
        commands=[
            'mkdir -p {}'.format(CONDOR_INPUT_LOC),
            'python2.7 {}/extract_raw_metadata_json.py {{input.rna_human}} {{output.rna_human}}'.format(
                EXTRACT_METADATA_JSON_LOCATION
            ),
            'python2.7 {}/extract_raw_metadata_json.py {{input.chip_human}} {{output.chip_human}}'.format(
                EXTRACT_METADATA_JSON_LOCATION
            ),
            'python2.7 {}/extract_raw_metadata_json.py {{input.rna_mouse}} {{output.rna_mouse}}'.format(
                EXTRACT_METADATA_JSON_LOCATION
            ),
            'python2.7 {}/extract_raw_metadata_json.py {{input.chip_mouse}} {{output.chip_mouse}}'.format(
                EXTRACT_METADATA_JSON_LOCATION
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

##################################################################################
# Creates a giant tarball with all of the code needed to run the pipeline
# for each Condor job.
##################################################################################
rule bundle_condor_input_RNA_human:
    input:
        '{}/sample_to_raw_metadata.RNA_Seq.human.json'.format(
            CONDOR_INPUT_LOC
        )
    output:
        '{}/create_metasra_condor_bundle.RNA_Seq.human.tar.gz'.format(
            CONDOR_INPUT_LOC
         )
    run:
        commands=[
            'mkdir -p {}/create_metasra_condor_bundle.RNA_Seq.human'.format(
                CONDOR_INPUT_LOC
            ),
            'cp -r {pipeline_src}/map_sra_to_ontology {condor_input}/create_metasra_condor_bundle.RNA_Seq.human'.format(
                pipeline_src=PIPELINE_SRC_LOC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {pipeline_src}/pipeline_v53.py {condor_input}/create_metasra_condor_bundle.RNA_Seq.human/pipeline.py'.format(
                pipeline_src=BUILD_PIPELINE_LOC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {pipeline_src}/condor_run_pipeline.py {condor_input}/create_metasra_condor_bundle.RNA_Seq.human'.format(
                pipeline_src=CREATE_METASRA_SRC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {{input}} {}/create_metasra_condor_bundle.RNA_Seq.human'.format(
                CONDOR_INPUT_LOC
            ),          
            'tar -C {input} -zcf {{output}} create_metasra_condor_bundle.RNA_Seq.human'.format(
                input=CONDOR_INPUT_LOC
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c) 

rule bundle_condor_input_ChIP_human:
    input:
        '{}/sample_to_raw_metadata.ChIP_Seq.human.json'.format(
            CONDOR_INPUT_LOC
        )
    output:
        '{}/create_metasra_condor_bundle.ChIP_Seq.human.tar.gz'.format(
            CONDOR_INPUT_LOC
         )
    run:
        commands=[
            'mkdir -p {}/create_metasra_condor_bundle.ChIP_Seq.human'.format(
                CONDOR_INPUT_LOC
            ),
            'cp -r {pipeline_src}/map_sra_to_ontology {condor_input}/create_metasra_condor_bundle.ChIP_Seq.human'.format(
                pipeline_src=PIPELINE_SRC_LOC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {pipeline_src}/pipeline_v53.py {condor_input}/create_metasra_condor_bundle.ChIP_Seq.human/pipeline.py'.format(
                pipeline_src=BUILD_PIPELINE_LOC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {pipeline_src}/condor_run_pipeline.py {condor_input}/create_metasra_condor_bundle.ChIP_Seq.human'.format(
                pipeline_src=CREATE_METASRA_SRC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {{input}} {}/create_metasra_condor_bundle.ChIP_Seq.human'.format(
                CONDOR_INPUT_LOC
            ),
            'tar -C {input} -zcf {{output}} create_metasra_condor_bundle.ChIP_Seq.human'.format(
                input=CONDOR_INPUT_LOC
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

rule bundle_condor_input_RNA_mouse:
    input:
        '{}/sample_to_raw_metadata.RNA_Seq.mouse.json'.format(
            CONDOR_INPUT_LOC
        )
    output:
        '{}/create_metasra_condor_bundle.RNA_Seq.mouse.tar.gz'.format(
            CONDOR_INPUT_LOC
         )
    run:
        commands=[
            'mkdir -p {}/create_metasra_condor_bundle.RNA_Seq.mouse'.format(
                CONDOR_INPUT_LOC
            ),
            'cp -r {pipeline_src}/map_sra_to_ontology {condor_input}/create_metasra_condor_bundle.RNA_Seq.mouse'.format(
                pipeline_src=PIPELINE_SRC_LOC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {pipeline_src}/pipeline_v53.py {condor_input}/create_metasra_condor_bundle.RNA_Seq.mouse/pipeline.py'.format(
                pipeline_src=BUILD_PIPELINE_LOC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {pipeline_src}/condor_run_pipeline.py {condor_input}/create_metasra_condor_bundle.RNA_Seq.mouse'.format(
                pipeline_src=CREATE_METASRA_SRC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {{input}} {}/create_metasra_condor_bundle.RNA_Seq.mouse'.format(
                CONDOR_INPUT_LOC
            ),
            'tar -C {input} -zcf {{output}} create_metasra_condor_bundle.RNA_Seq.mouse'.format(
                input=CONDOR_INPUT_LOC
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

rule bundle_condor_input_ChIP_mouse:
    input:
        '{}/sample_to_raw_metadata.ChIP_Seq.mouse.json'.format(
            CONDOR_INPUT_LOC
        )
    output:
        '{}/create_metasra_condor_bundle.ChIP_Seq.mouse.tar.gz'.format(
            CONDOR_INPUT_LOC
         )
    run:
        commands=[
            'mkdir -p {}/create_metasra_condor_bundle.ChIP_Seq.mouse'.format(
                CONDOR_INPUT_LOC
            ),
            'cp -r {pipeline_src}/map_sra_to_ontology {condor_input}/create_metasra_condor_bundle.ChIP_Seq.mouse'.format(
                pipeline_src=PIPELINE_SRC_LOC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {pipeline_src}/pipeline_v53.py {condor_input}/create_metasra_condor_bundle.ChIP_Seq.mouse/pipeline.py'.format(
                pipeline_src=BUILD_PIPELINE_LOC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {pipeline_src}/condor_run_pipeline.py {condor_input}/create_metasra_condor_bundle.ChIP_Seq.mouse'.format(
                pipeline_src=CREATE_METASRA_SRC,
                condor_input=CONDOR_INPUT_LOC
            ),
            'cp {{input}} {}/create_metasra_condor_bundle.ChIP_Seq.mouse'.format(
                CONDOR_INPUT_LOC
            ),
            'tar -C {input} -zcf {{output}} create_metasra_condor_bundle.ChIP_Seq.mouse'.format(
                input=CONDOR_INPUT_LOC
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)


##################################################################################
# Prepare chunks for parallel execution
##################################################################################

checkpoint compute_chunks:
    input:
        f'{CONDOR_INPUT_LOC}/sample_to_raw_metadata.{{assay}}.{{species}}.json'
    output:
        directory(f'{CONDOR_INPUT_LOC}/sample_chunks.{{assay}}.{{species}}')
    run:
        import json
        from itertools import batched
        from pathlib import Path

        with open(input[0], 'rt') as instream:
            all_samples = json.load(instream)
        
        out_dir = Path(output[0])
        out_dir.mkdir(parents=True, exist_ok=True)

        for i, chunk in enumerate(batched(all_samples, 10000)):
            with (out_dir / f'chunk_{i}.json').open('wt') as outstream:
                json.dump(
                    {
                        'sample_accessions': list(chunk)
                    },
                    outstream
                )

##################################################################################
# Run term mapping job
##################################################################################

rule run_term_mapping:
    input:
        samples_list=f'{CONDOR_INPUT_LOC}/sample_chunks.{{assay}}.{{species}}/chunk_{{chunk}}.json',
        sample_to_raw_metadata=f'{CONDOR_INPUT_LOC}/sample_to_raw_metadata.{{assay}}.{{species}}.json'
    output:
        f'{CONDOR_ROOT_LOC}/{{assay}}.{{species}}.{{chunk}}/{FINISH_FILENAME}'
    shell:
        f"""
        cd {METASRA_REPO}
        source init-environment.sh
        cd create_metasra
        python2.7 condor_run_pipeline.py \
            -s {{input.samples_list}} \
            -m {{input.sample_to_raw_metadata}} \
            -o {{output}}
        """


##################################################################################
# Gather term mapping outputs
##################################################################################

def gather_term_mappings_input(wildcards):
    chunks_dir = checkpoints.compute_chunks.get(**wildcards).output[0]
    return expand(
        f'{CONDOR_ROOT_LOC}/{{assay}}.{{species}}.{{chunk}}/{FINISH_FILENAME}',
        chunk=glob_wildcards(f'{chunks_dir}/chunk_{{chunk}}.json').chunk,
        **wildcards
    )


rule gather_term_mappings:
    input:
        gather_term_mappings_input
    output:
        f'{OUTPUT_LOC}/{{assay}}.{{species}}/{RAW_MAPPINGS_FILENAME}'
    script:
        'gather_mappings.py' # Todo: update to python3


##################################################################################
# Predict the sample-type for all samples. The file 
# <OUTPUT_LOC>/predict_sample_type.log stores information about this step.
##################################################################################
rule predict_sample_type:
    input:
        metadata='{}/sample_to_raw_metadata.{{assay}}.{{species}}.json'.format(
            CONDOR_INPUT_LOC
        ),
        mappings='{condor_output}/{{assay}}.{{species}}/{raw_mappings_f}'.format(
            condor_output=OUTPUT_LOC,
            raw_mappings_f=RAW_MAPPINGS_FILENAME
        )
    output:
        result='{condor_output}/{{assay}}.{{species}}/{predictions_f}'.format(
            condor_output=OUTPUT_LOC,
            predictions_f=SAMPLE_TYPE_PREDICTIONS_FILENAME
        ),
        log='{}/{{assay}}.{{species}}/predict_sample_type.log'.format(
            OUTPUT_LOC
        )
    run:
        commands=[
            'python2.7 {src}/predict_sample_type/run_on_entire_dataset.py {{input.metadata}} {{input.mappings}} {{output.result}} {{output.log}}'.format(
                src=PIPELINE_SRC_LOC
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

##################################################################################
# Build the final database files.
##################################################################################
rule build_database_files:
    input:
        mappings='{condor_output}/{{assay}}.{{species}}/{raw_mappings_f}'.format(
            condor_output=OUTPUT_LOC,
            raw_mappings_f=RAW_MAPPINGS_FILENAME
        ),
        predictions='{condor_output}/{{assay}}.{{species}}/{predictions_f}'.format(
            condor_output=OUTPUT_LOC,
            predictions_f=SAMPLE_TYPE_PREDICTIONS_FILENAME
        )
    output:
        json_f='{output_loc}/metasra.{{assay}}.{{species}}.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        sql_f='{output_loc}/metasra.{{assay}}.{{species}}.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        )
    run:
        commands=[
            'python2.7 {src}/build_metasra_database_files.py {{input.mappings}} {{input.predictions}} {{output.json_f}} {{output.sql_f}}'.format(
                src=CREATE_METASRA_SRC
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

##################################################################################
# Join the various species and assays files into one JSON and one Sqlite file.
###################################################################################
rule build_final_json_db:
    input:
        human_rna='{output_loc}/metasra.RNA_Seq.human.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        human_chip='{output_loc}/metasra.ChIP_Seq.human.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        mouse_rna='{output_loc}/metasra.RNA_Seq.mouse.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        mouse_chip='{output_loc}/metasra.ChIP_Seq.mouse.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        )
    output:
        '{output_loc}/metasra.final.{today}.json'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        )
    run:
        commands=[
            'python2.7 join_assay_json_dbs.py {input.human_rna},{input.human_chip},{input.mouse_rna},{input.mouse_chip} RNA-seq,ChIP-seq,RNA-seq,ChIP-seq human,human,mouse,mouse -o {output}'            
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

rule build_final_sqlite_db:
    input:
        human_rna='{output_loc}/metasra.RNA_Seq.human.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        human_chip='{output_loc}/metasra.ChIP_Seq.human.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        mouse_rna='{output_loc}/metasra.RNA_Seq.mouse.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        ),
        mouse_chip='{output_loc}/metasra.ChIP_Seq.mouse.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        )
    output:
        '{output_loc}/metasra.final.{today}.sqlite'.format(
            output_loc=OUTPUT_LOC,
            today=TODAY_DATE
        )
    run:
        commands=[
            'python2.7 join_assay_sqlite_dbs.py {input.human_rna},{input.human_chip},{input.mouse_rna},{input.mouse_chip} RNA-seq,ChIP-seq,RNA-seq,ChIP-seq human,human,mouse,mouse -o {output}'
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)
